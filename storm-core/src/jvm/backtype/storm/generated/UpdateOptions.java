/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package backtype.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class UpdateOptions implements org.apache.thrift.TBase<UpdateOptions, UpdateOptions._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateOptions");

  private static final org.apache.thrift.protocol.TField UPLOADED_JAR_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadedJarLocation", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField JSON_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonConf", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOPOLOGY_FIELD_DESC = new org.apache.thrift.protocol.TField("topology", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UpdateOptionsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UpdateOptionsTupleSchemeFactory());
  }

  private String uploadedJarLocation; // optional
  private String jsonConf; // optional
  private StormTopology topology; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UPLOADED_JAR_LOCATION((short)1, "uploadedJarLocation"),
    JSON_CONF((short)2, "jsonConf"),
    TOPOLOGY((short)3, "topology");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UPLOADED_JAR_LOCATION
          return UPLOADED_JAR_LOCATION;
        case 2: // JSON_CONF
          return JSON_CONF;
        case 3: // TOPOLOGY
          return TOPOLOGY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.UPLOADED_JAR_LOCATION,_Fields.JSON_CONF,_Fields.TOPOLOGY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UPLOADED_JAR_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("uploadedJarLocation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JSON_CONF, new org.apache.thrift.meta_data.FieldMetaData("jsonConf", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPOLOGY, new org.apache.thrift.meta_data.FieldMetaData("topology", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StormTopology.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateOptions.class, metaDataMap);
  }

  public UpdateOptions() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateOptions(UpdateOptions other) {
    if (other.is_set_uploadedJarLocation()) {
      this.uploadedJarLocation = other.uploadedJarLocation;
    }
    if (other.is_set_jsonConf()) {
      this.jsonConf = other.jsonConf;
    }
    if (other.is_set_topology()) {
      this.topology = new StormTopology(other.topology);
    }
  }

  public UpdateOptions deepCopy() {
    return new UpdateOptions(this);
  }

  @Override
  public void clear() {
    this.uploadedJarLocation = null;
    this.jsonConf = null;
    this.topology = null;
  }

  public String get_uploadedJarLocation() {
    return this.uploadedJarLocation;
  }

  public void set_uploadedJarLocation(String uploadedJarLocation) {
    this.uploadedJarLocation = uploadedJarLocation;
  }

  public void unset_uploadedJarLocation() {
    this.uploadedJarLocation = null;
  }

  /** Returns true if field uploadedJarLocation is set (has been assigned a value) and false otherwise */
  public boolean is_set_uploadedJarLocation() {
    return this.uploadedJarLocation != null;
  }

  public void set_uploadedJarLocation_isSet(boolean value) {
    if (!value) {
      this.uploadedJarLocation = null;
    }
  }

  public String get_jsonConf() {
    return this.jsonConf;
  }

  public void set_jsonConf(String jsonConf) {
    this.jsonConf = jsonConf;
  }

  public void unset_jsonConf() {
    this.jsonConf = null;
  }

  /** Returns true if field jsonConf is set (has been assigned a value) and false otherwise */
  public boolean is_set_jsonConf() {
    return this.jsonConf != null;
  }

  public void set_jsonConf_isSet(boolean value) {
    if (!value) {
      this.jsonConf = null;
    }
  }

  public StormTopology get_topology() {
    return this.topology;
  }

  public void set_topology(StormTopology topology) {
    this.topology = topology;
  }

  public void unset_topology() {
    this.topology = null;
  }

  /** Returns true if field topology is set (has been assigned a value) and false otherwise */
  public boolean is_set_topology() {
    return this.topology != null;
  }

  public void set_topology_isSet(boolean value) {
    if (!value) {
      this.topology = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UPLOADED_JAR_LOCATION:
      if (value == null) {
        unset_uploadedJarLocation();
      } else {
        set_uploadedJarLocation((String)value);
      }
      break;

    case JSON_CONF:
      if (value == null) {
        unset_jsonConf();
      } else {
        set_jsonConf((String)value);
      }
      break;

    case TOPOLOGY:
      if (value == null) {
        unset_topology();
      } else {
        set_topology((StormTopology)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UPLOADED_JAR_LOCATION:
      return get_uploadedJarLocation();

    case JSON_CONF:
      return get_jsonConf();

    case TOPOLOGY:
      return get_topology();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UPLOADED_JAR_LOCATION:
      return is_set_uploadedJarLocation();
    case JSON_CONF:
      return is_set_jsonConf();
    case TOPOLOGY:
      return is_set_topology();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UpdateOptions)
      return this.equals((UpdateOptions)that);
    return false;
  }

  public boolean equals(UpdateOptions that) {
    if (that == null)
      return false;

    boolean this_present_uploadedJarLocation = true && this.is_set_uploadedJarLocation();
    boolean that_present_uploadedJarLocation = true && that.is_set_uploadedJarLocation();
    if (this_present_uploadedJarLocation || that_present_uploadedJarLocation) {
      if (!(this_present_uploadedJarLocation && that_present_uploadedJarLocation))
        return false;
      if (!this.uploadedJarLocation.equals(that.uploadedJarLocation))
        return false;
    }

    boolean this_present_jsonConf = true && this.is_set_jsonConf();
    boolean that_present_jsonConf = true && that.is_set_jsonConf();
    if (this_present_jsonConf || that_present_jsonConf) {
      if (!(this_present_jsonConf && that_present_jsonConf))
        return false;
      if (!this.jsonConf.equals(that.jsonConf))
        return false;
    }

    boolean this_present_topology = true && this.is_set_topology();
    boolean that_present_topology = true && that.is_set_topology();
    if (this_present_topology || that_present_topology) {
      if (!(this_present_topology && that_present_topology))
        return false;
      if (!this.topology.equals(that.topology))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uploadedJarLocation = true && (is_set_uploadedJarLocation());
    list.add(present_uploadedJarLocation);
    if (present_uploadedJarLocation)
      list.add(uploadedJarLocation);

    boolean present_jsonConf = true && (is_set_jsonConf());
    list.add(present_jsonConf);
    if (present_jsonConf)
      list.add(jsonConf);

    boolean present_topology = true && (is_set_topology());
    list.add(present_topology);
    if (present_topology)
      list.add(topology);

    return list.hashCode();
  }

  @Override
  public int compareTo(UpdateOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_uploadedJarLocation()).compareTo(other.is_set_uploadedJarLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_uploadedJarLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadedJarLocation, other.uploadedJarLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_jsonConf()).compareTo(other.is_set_jsonConf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_jsonConf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonConf, other.jsonConf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_topology()).compareTo(other.is_set_topology());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_topology()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topology, other.topology);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UpdateOptions(");
    boolean first = true;

    if (is_set_uploadedJarLocation()) {
      sb.append("uploadedJarLocation:");
      if (this.uploadedJarLocation == null) {
        sb.append("null");
      } else {
        sb.append(this.uploadedJarLocation);
      }
      first = false;
    }
    if (is_set_jsonConf()) {
      if (!first) sb.append(", ");
      sb.append("jsonConf:");
      if (this.jsonConf == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonConf);
      }
      first = false;
    }
    if (is_set_topology()) {
      if (!first) sb.append(", ");
      sb.append("topology:");
      if (this.topology == null) {
        sb.append("null");
      } else {
        sb.append(this.topology);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (topology != null) {
      topology.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UpdateOptionsStandardSchemeFactory implements SchemeFactory {
    public UpdateOptionsStandardScheme getScheme() {
      return new UpdateOptionsStandardScheme();
    }
  }

  private static class UpdateOptionsStandardScheme extends StandardScheme<UpdateOptions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UPLOADED_JAR_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uploadedJarLocation = iprot.readString();
              struct.set_uploadedJarLocation_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JSON_CONF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jsonConf = iprot.readString();
              struct.set_jsonConf_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOPOLOGY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.topology = new StormTopology();
              struct.topology.read(iprot);
              struct.set_topology_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uploadedJarLocation != null) {
        if (struct.is_set_uploadedJarLocation()) {
          oprot.writeFieldBegin(UPLOADED_JAR_LOCATION_FIELD_DESC);
          oprot.writeString(struct.uploadedJarLocation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.jsonConf != null) {
        if (struct.is_set_jsonConf()) {
          oprot.writeFieldBegin(JSON_CONF_FIELD_DESC);
          oprot.writeString(struct.jsonConf);
          oprot.writeFieldEnd();
        }
      }
      if (struct.topology != null) {
        if (struct.is_set_topology()) {
          oprot.writeFieldBegin(TOPOLOGY_FIELD_DESC);
          struct.topology.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UpdateOptionsTupleSchemeFactory implements SchemeFactory {
    public UpdateOptionsTupleScheme getScheme() {
      return new UpdateOptionsTupleScheme();
    }
  }

  private static class UpdateOptionsTupleScheme extends TupleScheme<UpdateOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UpdateOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.is_set_uploadedJarLocation()) {
        optionals.set(0);
      }
      if (struct.is_set_jsonConf()) {
        optionals.set(1);
      }
      if (struct.is_set_topology()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.is_set_uploadedJarLocation()) {
        oprot.writeString(struct.uploadedJarLocation);
      }
      if (struct.is_set_jsonConf()) {
        oprot.writeString(struct.jsonConf);
      }
      if (struct.is_set_topology()) {
        struct.topology.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UpdateOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.uploadedJarLocation = iprot.readString();
        struct.set_uploadedJarLocation_isSet(true);
      }
      if (incoming.get(1)) {
        struct.jsonConf = iprot.readString();
        struct.set_jsonConf_isSet(true);
      }
      if (incoming.get(2)) {
        struct.topology = new StormTopology();
        struct.topology.read(iprot);
        struct.set_topology_isSet(true);
      }
    }
  }

}

